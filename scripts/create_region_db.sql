\set ON_ERROR_STOP on

\c "postgres";
CREATE DATABASE "BANK_ONEDB" ENCODING UTF8;

\c BANK_ONEDB;
BEGIN;
CREATE SCHEMA DBRG_BANKPAC;
GRANT ALL PRIVILEGES ON SCHEMA DBRG_BANKPAC TO public;

-- **************************************************************************
-- *    Copyright (C) 1984-2022 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: CreateCSATable.sql 1226407 2022-03-09 15:56:08Z cpj $
-- **************************************************************************

--  Create CSA table. Required in each region database
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Schema version
--

DROP TABLE IF EXISTS DBRG_BANKPAC."$$ACTIVE$$CSA" CASCADE;

CREATE TABLE DBRG_BANKPAC."$$ACTIVE$$CSA"
(
    Id                          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    RegionState                 INT NOT NULL DEFAULT 0,
    SchemaVersion               INT NOT NULL DEFAULT 3,
    StartTime                   TIMESTAMP WITHOUT TIME ZONE NULL,
    StopTime                    TIMESTAMP WITHOUT TIME ZONE NULL,
    StartingPgm                 VARCHAR(260) NULL,
    StartingHost                VARCHAR(256) NULL,
    StartingPID                 INT NULL,
    StoppingPgm                 VARCHAR(260) NULL,
    StoppingHost                VARCHAR(256) NULL,
    StoppingPID                 INT NULL,
    UsageCount                  INT NOT NULL DEFAULT 0,
    PRIMARY KEY (Id)
);

INSERT INTO DBRG_BANKPAC."$$ACTIVE$$CSA" DEFAULT VALUES;
-- **************************************************************************
-- *    Copyright (C) 1984-2022 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: CreateDataStoreUsageTable.sql 1229833 2022-04-06 08:37:35Z cpj $
-- **************************************************************************

--  Create datastore usage table. Required in each region database
--
--  Replacement strings:
--
--      {0} = Schema name
--

DROP TABLE IF EXISTS DBRG_BANKPAC."$$ACTIVE$$DataStore_Usage" CASCADE;

CREATE TABLE DBRG_BANKPAC."$$ACTIVE$$DataStore_Usage"
(
    Server                      VARCHAR(256) NOT NULL,
    DataStore                   VARCHAR(256) NOT NULL,
    Host                        VARCHAR(256) NOT NULL,
    PID                         INT NOT NULL,
    PRIMARY KEY (Server, DataStore, Host, PID)
);
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: CreateResourceLocksTable.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

--Create resource locks table. Required in both region and cross-region databases
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--

DROP TABLE IF EXISTS DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" CASCADE;

CREATE TABLE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
(
    Id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Time TIMESTAMP WITHOUT TIME ZONE DEFAULT (NOW() AT TIME ZONE 'utc'),
    Owned BOOLEAN NOT NULL,
    QNameKey BYTEA NOT NULL,
    RNameKey BYTEA NOT NULL,
    Scope CHAR(8) NOT NULL,
    TaskNumber BIGINT NOT NULL,
    Region VARCHAR(64) NOT NULL,
    QName VARCHAR(8) NOT NULL,
    RName VARCHAR(256) NOT NULL,
    ShareMode CHAR(1) NOT NULL,
    PRIMARY KEY (Id)
);
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: CreateResourceLocksProcessTable.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

--  Create resource locks table process. Required in both region and cross-region databases
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--

DROP TABLE IF EXISTS DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" CASCADE;

CREATE TABLE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process"
(
    ResourceLockId BIGINT NOT NULL,
    ProcessRecordId BIGINT NOT NULL,
    PRIMARY KEY (ResourceLockId)
);
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: DeqRequestNative.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

-- **************************************************************************
-- **************************************************************************
-- N.B. This version has been superseded by DeqRequestNativeV2
-- **************************************************************************
-- **************************************************************************

--  Perform a DEQ request (native specific - ES for .NET implementation + use of $$ACTIVE$$Resource_Locks_Process)
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--
--  On entry:
--
--      p_requestType           Type of DEQ request:
--
--                                  1 = Release resource if it is currently owned by the task (HAVE)
--                                  4 = Unconditional release of resource (NONE)
--
--      p_qnameKey              Major name (used as part of the primary key)
--      p_rnameKey              Minor name (used as part of the primary key)
--      p_scope                 Scope of request (used as part of the primary key):
--
--                                  "Step"
--                                  "System"
--                                  "Systems"
--
--      p_taskNumber            Task making the request (used as part of the primary key)
--
--      p_releaseLock           Boolean indicating whether an ENQ lock should actually be released
--                              (N.B. Defaults to TRUE. Only used by unit tests to ensure that records
--                              are created in the correct order with the correct scope, etc)
--
--      p_region                Name of region making the request
--
--  On exit:
--
--      Result of request:
--
--          0 =  the resource has been released
--          4  = the resource has been requested by the task, but the task does not have control. The task continues waiting.
--          8  = control of the resource has not been requested by the task, or the resource has already been released
--          -1 = fatal error
--          -2 = unconditional release of resource (NONE) that is waiting, but not owned. Note there is not an equivalent
--               return code defined by IBM for this case. An abend would occur on the mainframe
--
CREATE OR REPLACE FUNCTION DBRG_BANKPAC."fn_deq_request_native"(p_requestType INT,        --  Type of DEQ request
                                                          p_qnameKey BYTEA,         --  Major name (used as part of the primary key)
                                                          p_rnameKey BYTEA,         --  Minor name (used as part of the primary key)
                                                          p_scope VARCHAR(8),       --  Scope of request (used as part of the primary key)
                                                          p_taskNumber BIGINT,      --  Task making the request (used as part of the primary key)
                                                          p_releaseLock BOOLEAN,    --  Boolean indicating whether an ENQ lock should actually be released
                                                          p_region VARCHAR(64))     --  Name of region making the request
                           RETURNS INT AS
$func$
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: DeqRequestNative.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************
DECLARE
    l_firstTime BOOLEAN;
    l_id BIGINT;
    l_owned BOOLEAN;
    l_ownedCount INT;
    l_resourceLockCursor REFCURSOR;
    l_returnCode INT;
    l_rowCount INT;
    l_shareMode CHAR(1);
BEGIN
    l_returnCode = 0;

    --
    --  Check if the task has already issued a request for the resource
    --
    SELECT Id, Owned
      FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
     WHERE QNameKey = p_qnameKey AND
           RNameKey = p_rnameKey AND
           Scope = p_scope AND
           TaskNumber = p_taskNumber AND
           Region = p_region
     INTO l_id, l_owned;

    GET DIAGNOSTICS l_rowCount = ROW_COUNT;

    IF l_rowCount != 0
    THEN
        --
        --  The task has previously issued a request for the task.
        --  Determine whether the task owns the resource or whether it is still waiting
        --
        IF l_owned = 'true'
        THEN
            --
            --  The resource is owned by the task. Remove the resource request.
            --
            DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" WHERE Id = l_id;
            DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" WHERE ResourceLockId = l_id;

            --
            --  Determine whether there are any waiting tasks that can now be signalled
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope AND
                   Owned = 'true'
              INTO l_ownedCount;

            IF l_ownedCount = 0
            THEN
                --
                --  No other tasks own the resource, so signal waiting task(s)
                --
                l_firstTime = 'true';

                OPEN l_resourceLockCursor FOR SELECT Id
                                                    ,ShareMode
                                                FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                                               WHERE QNameKey = p_qnameKey AND
                                                     RNameKey = p_rnameKey AND
                                                     Scope = p_scope
                                            ORDER BY Id;

                LOOP
                    FETCH NEXT FROM l_resourceLockCursor INTO l_id, l_shareMode;

                    EXIT WHEN NOT FOUND;

                    IF l_firstTime = 'true'
                    THEN
                        --
                        --  First time through loop.
                        --  Allow exclusive or shared request
                        --
                        l_firstTime = 'false';
                    ELSE
                        --
                        --  Only allow shared requests the second and subsequent time through loop.
                        --
                        IF l_shareMode != 'S'
                        THEN
                            EXIT;
                        END IF;
                    END IF;

                    --
                    --  Change the request state to 'owned'
                    --
                    UPDATE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                        SET Owned = 'true'
                      WHERE (Id = l_id);

                    --
                    --  Bale out if an exclusive request has been signalled.
                    --  Otherwise fetch next request
                    --
                    IF l_shareMode = 'E'
                    THEN
                        EXIT;
                    END IF;
                END LOOP;

                CLOSE l_resourceLockCursor;
            END IF;
        ELSE
            --
            --  The resource is not owned by the task
            --
            IF p_requestType = 4
            THEN
                --
                --  Unconditional release of resource (NONE)
                --
                DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" WHERE Id = l_id;
                DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" WHERE ResourceLockId = l_id;

                l_returnCode = -2;
            ELSE
                --
                --  Release resource if it is currently owned by the task (HAVE)
                --
                l_returnCode = 4;
            END IF;
        END IF;
    ELSE
        --
        --  The resource has already been released
        --
        l_returnCode = 8;
    END IF;

    RETURN l_returnCode;
END;
$func$
LANGUAGE plpgsql VOLATILE
SECURITY INVOKER;
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: DeqRequestNativeV2.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

-- **************************************************************************
-- **************************************************************************
-- Version supersedes DeqRequestNative
-- **************************************************************************
-- **************************************************************************

--  Perform a DEQ request (native specific - ES for .NET implementation + use of $$ACTIVE$$Resource_Locks_Process)
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--
--  On entry:
--
--      p_requestType           Type of DEQ request:
--
--                                  1 = Release resource if it is currently owned by the task (HAVE)
--                                  4 = Unconditional release of resource (NONE)
--
--      p_qnameKey              Major name (used as part of the primary key)
--      p_rnameKey              Minor name (used as part of the primary key)
--      p_scope                 Scope of request (used as part of the primary key):
--
--                                  "Step"
--                                  "System"
--                                  "Systems"
--
--      p_taskNumber            Task making the request (used as part of the primary key)
--
--      p_releaseLock           Boolean indicating whether an ENQ lock should actually be released
--                              (N.B. Defaults to TRUE. Only used by unit tests to ensure that records
--                              are created in the correct order with the correct scope, etc)
--
--      p_region                Name of region making the request
--
--      p_processRecordId       Id of the associated process record in the cross-region database
--
--  On exit:
--
--      Result of request:
--
--          0 =  the resource has been released
--          4  = the resource has been requested by the task, but the task does not have control. The task continues waiting.
--          8  = control of the resource has not been requested by the task, or the resource has already been released
--          -1 = fatal error
--          -2 = unconditional release of resource (NONE) that is waiting, but not owned. Note there is not an equivalent
--               return code defined by IBM for this case. An abend would occur on the mainframe
--
CREATE OR REPLACE FUNCTION DBRG_BANKPAC."fn_deq_request_native_v2"(p_requestType INT,         --  Type of DEQ request
                                                             p_qnameKey BYTEA,          --  Major name (used as part of the primary key)
                                                             p_rnameKey BYTEA,          --  Minor name (used as part of the primary key)
                                                             p_scope VARCHAR(8),        --  Scope of request (used as part of the primary key)
                                                             p_taskNumber BIGINT,       --  Task making the request (used as part of the primary key)
                                                             p_releaseLock BOOLEAN,     --  Boolean indicating whether an ENQ lock should actually be released
                                                             p_region VARCHAR(64),      --  Name of region making the request
                                                             p_processRecordId BIGINT)  --  Id of the associated process record in the cross-region database
                           RETURNS INT AS
$func$
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: DeqRequestNativeV2.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************
DECLARE
    l_firstTime BOOLEAN;
    l_id BIGINT;
    l_owned BOOLEAN;
    l_ownedCount INT;
    l_resourceLockCursor REFCURSOR;
    l_returnCode INT;
    l_rowCount INT;
    l_shareMode CHAR(1);
BEGIN
    l_returnCode = 0;

    --
    --  Check if the task has already issued a request for the resource
    --
    IF p_taskNumber = 0
    THEN
        SELECT Id, Owned
          FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
         WHERE QNameKey = p_qnameKey AND
               RNameKey = p_rnameKey AND
               Scope = p_scope AND
               TaskNumber = p_taskNumber AND
               Region = p_region
         INTO l_id, l_owned;
    ELSE
        SELECT e.Id, e.Owned
          FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" AS e
         INNER JOIN DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" AS p ON p.ResourceLockId = e.Id
         WHERE e.QNameKey = p_qnameKey AND
               e.RNameKey = p_rnameKey AND
               e.Scope = p_scope AND
               e.TaskNumber = p_taskNumber AND
               e.Region = p_region AND
               p.ProcessRecordId = p_processRecordId
         INTO l_id, l_owned;
    END IF;

    GET DIAGNOSTICS l_rowCount = ROW_COUNT;

    IF l_rowCount != 0
    THEN
        --
        --  The task has previously issued a request for the task.
        --  Determine whether the task owns the resource or whether it is still waiting
        --
        IF l_owned = 'true'
        THEN
            --
            --  The resource is owned by the task. Remove the resource request.
            --
            DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" WHERE Id = l_id;
            DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" WHERE ResourceLockId = l_id;

            --
            --  Determine whether there are any waiting tasks that can now be signalled
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope AND
                   Owned = 'true'
              INTO l_ownedCount;

            IF l_ownedCount = 0
            THEN
                --
                --  No other tasks own the resource, so signal waiting task(s)
                --
                l_firstTime = 'true';

                OPEN l_resourceLockCursor FOR SELECT Id
                                                    ,ShareMode
                                                FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                                               WHERE QNameKey = p_qnameKey AND
                                                     RNameKey = p_rnameKey AND
                                                     Scope = p_scope
                                            ORDER BY Id;

                LOOP
                    FETCH NEXT FROM l_resourceLockCursor INTO l_id, l_shareMode;

                    EXIT WHEN NOT FOUND;

                    IF l_firstTime = 'true'
                    THEN
                        --
                        --  First time through loop.
                        --  Allow exclusive or shared request
                        --
                        l_firstTime = 'false';
                    ELSE
                        --
                        --  Only allow shared requests the second and subsequent time through loop.
                        --
                        IF l_shareMode != 'S'
                        THEN
                            EXIT;
                        END IF;
                    END IF;

                    --
                    --  Change the request state to 'owned'
                    --
                    UPDATE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                        SET Owned = 'true'
                      WHERE (Id = l_id);

                    --
                    --  Bale out if an exclusive request has been signalled.
                    --  Otherwise fetch next request
                    --
                    IF l_shareMode = 'E'
                    THEN
                        EXIT;
                    END IF;
                END LOOP;

                CLOSE l_resourceLockCursor;
            END IF;
        ELSE
            --
            --  The resource is not owned by the task
            --
            IF p_requestType = 4
            THEN
                --
                --  Unconditional release of resource (NONE)
                --
                DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" WHERE Id = l_id;
                DELETE FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" WHERE ResourceLockId = l_id;

                l_returnCode = -2;
            ELSE
                --
                --  Release resource if it is currently owned by the task (HAVE)
                --
                l_returnCode = 4;
            END IF;
        END IF;
    ELSE
        --
        --  The resource has already been released
        --
        l_returnCode = 8;
    END IF;

    RETURN l_returnCode;
END;
$func$
LANGUAGE plpgsql VOLATILE
SECURITY INVOKER;
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: EnqRequestNative.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

-- **************************************************************************
-- **************************************************************************
-- N.B. This version has been superseded by EnqRequestNativeV2
-- **************************************************************************
-- **************************************************************************

--  Perform an ENQ request (native specific - ES for .NET implementation + use of $$ACTIVE$$Resource_Locks_Process)
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--
--  On entry:
--
--      p_requestType           Type of ENQ request:
--
--                                  0 = Change from shared to exclusive control (CHNG)
--                                  1 = Conditionally request control if a request
--                                      for the given task has not been previously made (HAVE)
--                                  2 = Test availability of the resource (TEST)
--                                  3 = Assign control only if immediately available (USE)
--                                  4 = Unconditional request for control (NONE)
--
--      p_qnameKey              Major name (used as part of the primary key)
--      p_rnameKey              Minor name (used as part of the primary key)
--      p_scope                 Scope of request (used as part of the primary key):
--
--                                  "Step"
--                                  "System"
--                                  "Systems"
--
--      p_taskNumber            Task making the request (used as part of the primary key)
--      p_qname                 Displayable major name
--      p_rname                 Displayable minor name
--      p_shareMode             Specifies whether shared or exclusive control of the resource is required:
--
--                                  "S" = shared
--                                  "E" = exclusive
--
--      p_getLock               Boolean indicating whether an ENQ lock should actually be obtained
--                              (N.B. Defaults to TRUE. Only used by unit tests to ensure that records
--                              are created in the correct order with the correct scope, etc)
--
--      p_region                Name of region making the request
--
--      p_processRecordId       Id of the associated process record in the cross-region database
--
--  On exit:
--
--      p_lockId                Id of lock record created to allow the caller to determine availability
--
--      p_returnCode            Result of request:
--  
--                                  0 =  the resource is immediately available (TEST)
--                                       the task now has control of the resource (USE, HAVE, NONE)
--                                       the status of the task has changed from shared to exclusive (CHNG)
--                                  4  = the resource is not immediately available (TEST, USE)
--                                       the status of the resource cannot be changed to exclusive. Other tasks have it shared. (CHNG)
--                                  8  = the task has previously requested control of the resource and has control (TEST, USE, HAVE)
--                                       the status of the resource cannot be changed to exclusive. An ENQ for the request does not exist. (CHNG)
--                                  14 = the task has previously requested control of the resource and does not have control (TEST, USE)
--                                  -1 = fatal error
--
DROP TYPE IF EXISTS DBRG_BANKPAC.result_Enq CASCADE;

CREATE TYPE DBRG_BANKPAC.result_Enq AS (p_returnCode INT, 
                               p_lockId BIGINT);

CREATE OR REPLACE FUNCTION DBRG_BANKPAC."fn_enq_request_native"(p_requestType INT,            --  Type of ENQ request
                                                          p_qnameKey BYTEA,             --  Major name (used as part of the primary key)
                                                          p_rnameKey BYTEA,             --  Minor name (used as part of the primary key)
                                                          p_scope VARCHAR(8),           --  Scope of request (used as part of the primary key)
                                                          p_taskNumber BIGINT,          --  Task making the request (used as part of the primary key)
                                                          p_qname VARCHAR(8),           --  Displayable major name
                                                          p_rname VARCHAR(256),         --  Displayable minor name
                                                          p_shareMode CHAR(1),          --  Specifies whether shared or exclusive control of the resource is required
                                                          p_getLock BOOLEAN,            --  Boolean indicating whether an ENQ lock should be obtained
                                                          p_region VARCHAR(64),         --  Name of region making the request
                                                          p_processRecordId BIGINT)     --  Id of the associated process record in the cross-region database
                           RETURNS DBRG_BANKPAC.result_Enq AS
$func$
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: EnqRequestNative.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************
DECLARE
    l_enqCount INT;
    l_id BIGINT;
    l_lockId BIGINT;
    l_owned BOOLEAN;
    l_returnCode INT;
    l_rowCount INT;
    l_result DBRG_BANKPAC.result_Enq;
    l_retLockId BIGINT;
    l_shareMode CHAR(1);
BEGIN
    l_returnCode = 0;

    --
    --  Check if the task has already issued a request for the resource
    --
    SELECT Id, Owned, ShareMode
      FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
     WHERE QNameKey = p_qnameKey AND
           RNameKey = p_rnameKey AND
           Scope = p_scope AND
           TaskNumber = p_taskNumber AND
           Region = p_region
     INTO l_id, l_owned, l_shareMode;

    GET DIAGNOSTICS l_rowCount = ROW_COUNT;

    IF l_rowCount = 0
    THEN
        --
        --  The task has not previously issued a request for the task.
        --  Determine whether immediate access to the resource can be granted
        --
        IF p_shareMode = 'S'
        THEN
            --
            --  The task has requested shared access.
            --  Cannot get immediate control if any other tasks have exclusive requests outstanding
            --  (i.e. the only outstanding requests will have shared access and will have control of the resource)
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope AND
                   ShareMode = 'E'
              INTO l_enqCount;

            IF l_enqCount = 0
            THEN
                l_owned = 'true';
            ELSE
                l_owned = 'false';
            END IF;
        ELSE
            --
            --  The task has requested exclusive access.
            --  Cannot get immediate control if any other tasks have requests outstanding.
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope
              INTO l_enqCount;

            IF l_enqCount = 0
            THEN
                l_owned = 'true';
            ELSE
                l_owned = 'false';
            END IF;
        END IF;

        --
        --  Insert request if:
        -- 
        --      1) Not a TEST request or CHNG request
        --              AND
        --      2) USE request and task can be granted immediate control
        --              OR
        --      3) HAVE or NONE request
        --
        IF p_requestType = 2
        THEN
            --  TEST
            IF l_owned = 'false'
            THEN
                l_returnCode = 4;
            END IF;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;
        
        IF p_requestType = 0
        THEN
            --  CHNG
            l_returnCode = 8;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;
        
        IF p_requestType = 3 AND l_owned = 'false'
        THEN
            --  USE
            l_returnCode = 4;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;

        INSERT INTO DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
           (Owned, QNameKey, RNameKey, Scope, QName, RName, ShareMode, TaskNumber, Region)
            VALUES (l_owned, p_qnameKey, p_rnameKey, p_scope, p_qname, p_rname, p_shareMode, p_taskNumber, p_region)
        RETURNING Id INTO l_lockId;

        IF p_taskNumber != 0
        THEN
            INSERT INTO DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process"
                (ResourceLockId, ProcessRecordId)
                VALUES (l_lockId, p_processRecordId);
        END IF;

        --
        --  Return lock id of the request record if the resource is not immediately available
        --
        IF l_owned = 'false' AND p_getLock = 'true'
        THEN
            l_retLockId = l_lockId;
        END IF;
    ELSE
        --
        --  The task has previously issued a request for the task ...
        --
        IF p_requestType = 0
        THEN
            --  CHANGE
            IF l_owned = 'true'
            THEN
                SELECT COUNT(*)
                  FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                 WHERE QNameKey = p_qnameKey AND
                       RNameKey = p_rnameKey AND
                       Scope = p_scope AND
                       Owned = 'true'
                 INTO l_enqCount;

                IF l_enqCount = 1
                THEN
                    --
                    --  Task uniquely has control of the resource
                    --
                    UPDATE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                        SET ShareMode = 'E'
                        WHERE (Id = l_id);
                ELSE
                    --
                    --  Another task shares control of the resource
                    --
                    l_returnCode = 4;
                END IF;
            ELSE
                --
                --  Task does not have control of the resource
                --
                l_returnCode = 14;
            END IF;
        ELSE
            --  NONE, HAVE, TEST or USE
            IF l_owned = 'true'
            THEN
                l_returnCode = 8;
            ELSE
                l_returnCode = 14;
            END IF;
        END IF;
    END IF;

    SELECT l_returnCode, l_retLockId INTO l_result;
    RETURN l_result;
END;
$func$
LANGUAGE plpgsql VOLATILE
SECURITY INVOKER;
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: EnqRequestNativeV2.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

-- **************************************************************************
-- **************************************************************************
-- Version supersedes EnqRequestNative
-- **************************************************************************
-- **************************************************************************

--  Perform an ENQ request (native specific - ES for .NET implementation + use of $$ACTIVE$$Resource_Locks_Process)
--
--  Replacement strings:
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--
--  On entry:
--
--      p_requestType           Type of ENQ request:
--
--                                  0 = Change from shared to exclusive control (CHNG)
--                                  1 = Conditionally request control if a request
--                                      for the given task has not been previously made (HAVE)
--                                  2 = Test availability of the resource (TEST)
--                                  3 = Assign control only if immediately available (USE)
--                                  4 = Unconditional request for control (NONE)
--
--      p_qnameKey              Major name (used as part of the primary key)
--      p_rnameKey              Minor name (used as part of the primary key)
--      p_scope                 Scope of request (used as part of the primary key):
--
--                                  "Step"
--                                  "System"
--                                  "Systems"
--
--      p_taskNumber            Task making the request (used as part of the primary key)
--      p_qname                 Displayable major name
--      p_rname                 Displayable minor name
--      p_shareMode             Specifies whether shared or exclusive control of the resource is required:
--
--                                  "S" = shared
--                                  "E" = exclusive
--
--      p_getLock               Boolean indicating whether an ENQ lock should actually be obtained
--                              (N.B. Defaults to TRUE. Only used by unit tests to ensure that records
--                              are created in the correct order with the correct scope, etc)
--
--      p_region                Name of region making the request
--
--      p_processRecordId       Id of the associated process record in the cross-region database
--
--  On exit:
--
--      p_lockId                Id of lock record created to allow the caller to determine availability
--
--      p_returnCode            Result of request:
--  
--                                  0 =  the resource is immediately available (TEST)
--                                       the task now has control of the resource (USE, HAVE, NONE)
--                                       the status of the task has changed from shared to exclusive (CHNG)
--                                  4  = the resource is not immediately available (TEST, USE)
--                                       the status of the resource cannot be changed to exclusive. Other tasks have it shared. (CHNG)
--                                  8  = the task has previously requested control of the resource and has control (TEST, USE, HAVE)
--                                       the status of the resource cannot be changed to exclusive. An ENQ for the request does not exist. (CHNG)
--                                  14 = the task has previously requested control of the resource and does not have control (TEST, USE)
--                                  -1 = fatal error
--
DROP TYPE IF EXISTS DBRG_BANKPAC.result_Enq_v2 CASCADE;

CREATE TYPE DBRG_BANKPAC.result_Enq_v2 AS (p_returnCode INT, 
                                  p_lockId BIGINT);

CREATE OR REPLACE FUNCTION DBRG_BANKPAC."fn_enq_request_native_v2"(p_requestType INT,             --  Type of ENQ request
                                                             p_qnameKey BYTEA,              --  Major name (used as part of the primary key)
                                                             p_rnameKey BYTEA,              --  Minor name (used as part of the primary key)
                                                             p_scope VARCHAR(8),            --  Scope of request (used as part of the primary key)
                                                             p_taskNumber BIGINT,           --  Task making the request (used as part of the primary key)
                                                             p_qname VARCHAR(8),            --  Displayable major name
                                                             p_rname VARCHAR(256),          --  Displayable minor name
                                                             p_shareMode CHAR(1),           --  Specifies whether shared or exclusive control of the resource is required
                                                             p_getLock BOOLEAN,             --  Boolean indicating whether an ENQ lock should be obtained
                                                             p_region VARCHAR(64),          --  Name of region making the request
                                                             p_processRecordId BIGINT)      --  Id of the associated process record in the cross-region database
                           RETURNS DBRG_BANKPAC.result_Enq_v2 AS
$func$
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: EnqRequestNativeV2.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************
DECLARE
    l_enqCount INT;
    l_id BIGINT;
    l_lockId BIGINT;
    l_owned BOOLEAN;
    l_returnCode INT;
    l_rowCount INT;
    l_result DBRG_BANKPAC.result_Enq_v2;
    l_retLockId BIGINT;
    l_shareMode CHAR(1);
BEGIN
    l_returnCode = 0;

    --
    --  Check if the task has already issued a request for the resource
    --
    IF p_taskNumber = 0
    THEN
        SELECT Id, Owned, ShareMode
          FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
         WHERE QNameKey = p_qnameKey AND
               RNameKey = p_rnameKey AND
               Scope = p_scope AND
               TaskNumber = p_taskNumber AND
               Region = p_region
         INTO l_id, l_owned, l_shareMode;
    ELSE
        SELECT e.Id, e.Owned, e.ShareMode
          FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks" AS e
         INNER JOIN DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process" AS p ON p.ResourceLockId = e.Id
         WHERE e.QNameKey = p_qnameKey AND
               e.RNameKey = p_rnameKey AND
               e.Scope = p_scope AND
               e.TaskNumber = p_taskNumber AND
               e.Region = p_region AND
               p.ProcessRecordId = p_processRecordId
         INTO l_id, l_owned, l_shareMode;
    END IF;

    GET DIAGNOSTICS l_rowCount = ROW_COUNT;

    IF l_rowCount = 0
    THEN
        --
        --  The task has not previously issued a request for the task.
        --  Determine whether immediate access to the resource can be granted
        --
        IF p_shareMode = 'S'
        THEN
            --
            --  The task has requested shared access.
            --  Cannot get immediate control if any other tasks have exclusive requests outstanding
            --  (i.e. the only outstanding requests will have shared access and will have control of the resource)
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope AND
                   ShareMode = 'E'
              INTO l_enqCount;

            IF l_enqCount = 0
            THEN
                l_owned = 'true';
            ELSE
                l_owned = 'false';
            END IF;
        ELSE
            --
            --  The task has requested exclusive access.
            --  Cannot get immediate control if any other tasks have requests outstanding.
            --
            SELECT COUNT(*)
              FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
             WHERE QNameKey = p_qnameKey AND
                   RNameKey = p_rnameKey AND
                   Scope = p_scope
              INTO l_enqCount;

            IF l_enqCount = 0
            THEN
                l_owned = 'true';
            ELSE
                l_owned = 'false';
            END IF;
        END IF;

        --
        --  Insert request if:
        -- 
        --      1) Not a TEST request or CHNG request
        --              AND
        --      2) USE request and task can be granted immediate control
        --              OR
        --      3) HAVE or NONE request
        --
        IF p_requestType = 2
        THEN
            --  TEST
            IF l_owned = 'false'
            THEN
                l_returnCode = 4;
            END IF;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;
        
        IF p_requestType = 0
        THEN
            --  CHNG
            l_returnCode = 8;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;
        
        IF p_requestType = 3 AND l_owned = 'false'
        THEN
            --  USE
            l_returnCode = 4;

            SELECT l_returnCode, l_retLockId INTO l_result;
            RETURN l_result;
        END IF;

        INSERT INTO DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
           (Owned, QNameKey, RNameKey, Scope, QName, RName, ShareMode, TaskNumber, Region)
            VALUES (l_owned, p_qnameKey, p_rnameKey, p_scope, p_qname, p_rname, p_shareMode, p_taskNumber, p_region)
        RETURNING Id INTO l_lockId;

        IF p_taskNumber != 0
        THEN
            INSERT INTO DBRG_BANKPAC."$$ACTIVE$$Resource_Locks_Process"
                (ResourceLockId, ProcessRecordId)
                VALUES (l_lockId, p_processRecordId);
        END IF;

        --
        --  Return lock id of the request record if the resource is not immediately available
        --
        IF l_owned = 'false' AND p_getLock = 'true'
        THEN
            l_retLockId = l_lockId;
        END IF;
    ELSE
        --
        --  The task has previously issued a request for the task ...
        --
        IF p_requestType = 0
        THEN
            --  CHANGE
            IF l_owned = 'true'
            THEN
                SELECT COUNT(*)
                  FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                 WHERE QNameKey = p_qnameKey AND
                       RNameKey = p_rnameKey AND
                       Scope = p_scope AND
                       Owned = 'true'
                 INTO l_enqCount;

                IF l_enqCount = 1
                THEN
                    --
                    --  Task uniquely has control of the resource
                    --
                    UPDATE DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
                        SET ShareMode = 'E'
                        WHERE (Id = l_id);
                ELSE
                    --
                    --  Another task shares control of the resource
                    --
                    l_returnCode = 4;
                END IF;
            ELSE
                --
                --  Task does not have control of the resource
                --
                l_returnCode = 14;
            END IF;
        ELSE
            --  NONE, HAVE, TEST or USE
            IF l_owned = 'true'
            THEN
                l_returnCode = 8;
            ELSE
                l_returnCode = 14;
            END IF;
        END IF;
    END IF;

    SELECT l_returnCode, l_retLockId INTO l_result;
    RETURN l_result;
END;
$func$
LANGUAGE plpgsql VOLATILE
SECURITY INVOKER;
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: IsResourceLockOwned.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************

--  Determine whether the given resource lock is owned
--
--  Replacement strings:
--
--      {0} = Schema name
--      {1} = Table name suffix (region vs cross-region) - shared by regions
--
--  On entry:
--
--      p_lockId                Id of resource lock to query
--
--  On exit:
--
--      l_returnCode            Result of request:
--
--                                  0	= resource lock not owned
--                                  1	= resource lock owned
--                                  2	= resource lock not found
--                                  -1	= fatal error
--
CREATE OR REPLACE FUNCTION DBRG_BANKPAC."fn_is_resource_lock_owned"(p_lockId BIGINT)  --  Id of resource lock to query
                           RETURNS INT AS
$func$
-- **************************************************************************
-- *    Copyright (C) 1984-2021 Micro Focus. All rights reserved.
-- *
-- *    The software and information contained herein are proprietary
-- *    to, and comprise valuable trade secrets of, Micro Focus,
-- *    which intends to preserve as trade secrets such software and
-- *    information. This software is an unpublished copyright of
-- *    Micro Focus and may not be used, copied, transmitted, or
-- *    stored in any manner other than as expressly provided in a
-- *    written instrument signed by Micro Focus and the user. This
-- *    software and information or any other copies thereof may not
-- *    be provided or otherwise made available to any other person.
-- *
-- *    $Id: IsResourceLockOwned.sql 1089712 2021-09-10 14:30:23Z cpj $
-- **************************************************************************
DECLARE
    l_owned BOOLEAN;
    l_returnCode INT;
    l_rowCount INT;
BEGIN
    l_returnCode = 0;

    --
    --  Get the requested resource lock
    --
    SELECT Owned
      FROM DBRG_BANKPAC."$$ACTIVE$$Resource_Locks"
     WHERE Id = p_lockId LIMIT 1
      INTO l_owned;

    GET DIAGNOSTICS l_rowCount = ROW_COUNT;

    IF l_rowCount != 0
    THEN
        IF l_owned = 'true'
        THEN
            --
            --  Resource lock is owned
            --
            l_returnCode = 1;
        ELSE
            --
            --  Resource lock is not owned
            --
            l_returnCode = 0;
        END IF;
    ELSE
        --
        --  Resource lock not found
        --
        l_returnCode = 2;
    END IF;

    RETURN l_returnCode;
END;
$func$
LANGUAGE plpgsql STABLE
SECURITY INVOKER;

COMMIT;
